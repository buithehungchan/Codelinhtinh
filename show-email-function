<?php
global $product, $post;
add_action( 'init', 'hide_notice' );
function hide_notice() {
remove_action( 'admin_notices', 'flatsome_maintenance_admin_notice' );
}
register_sidebar( array(
	'name'          => __( 'Main Menu', 'flatsome' ),
	'id'            => 'menu-main',
	'before_widget' => '<div id="%1$s" class="%2$s">',
	'after_widget'  => '</div>',
	'before_title'  => '<span class="widget-title"><span>',
	'after_title'   => '</span></span>',
) );

register_sidebar( array(
	'name'          => __( 'Menu Tab', 'flatsome' ),
	'id'            => 'sidebar-brand',
	'before_widget' => '<div id="%1$s" class="%2$s menu-tab">',
	'after_widget'  => '</div>',
	'before_title'  => '<span class="widget-title"><span>',
	'after_title'   => '</span></span>',
) );

register_sidebar( array(
	'name'          => __( 'Bộ lọc sản phẩm', 'flatsome' ),
	'id'            => 'filter-sidebar',
	'before_widget' => '<div id="%1$s" class="%2$s">',
	'after_widget'  => '</div>',
	'before_title'  => '<span class="widget-title"><span>',
	'after_title'   => '</span></span>',
) );

function register_footer_menu_mobile() {
	register_nav_menus(
		array( 'footer-menu-mobile' => __( 'Footer Menu Mobile' ) )
	);}
add_action( 'init', 'register_footer_menu_mobile' );

function add_footer_menu_mobile() {
	wp_nav_menu( array( 'theme_location' => 'footer-menu-mobile', 'container_class' => 'footer-menu-mobile' ) );
}
add_action('flatsome_after_header', 'add_footer_menu_mobile');

function load_custom_wp_admin_style(){
    wp_register_style( 'custom_wp_admin_css', get_bloginfo('stylesheet_directory') . '/admin.css', false, '1.0.0' );
    wp_enqueue_style( 'custom_wp_admin_css' );
}
add_action('admin_enqueue_scripts', 'load_custom_wp_admin_style');

function load_custom_wp_admin_script() {
    wp_register_script( 'custom_wp_admin_script', get_bloginfo('stylesheet_directory') . '/my-themes.js', false, '1.0.0' );
    wp_enqueue_script( 'custom_wp_admin_script' );
}
add_action( 'wp_footer', 'load_custom_wp_admin_script' );





add_action('init', function() {
  // remove duotone support for Gutenberg blocks
  remove_filter('render_block', 'wp_render_duotone_support');
});

// Enable shortcodes in term description
add_filter( 'term_description', 'do_shortcode' );

// Add Icon Menu in Widget
add_filter('wp_nav_menu_args', 'wpex_ux_menu_icon');
add_filter('widget_nav_menu_args', 'wpex_ux_menu_icon');
function wpex_ux_menu_icon($args) {
   return array_merge( $args, array(
	  'walker' => new FlatsomeNavDropdown(),
   ) );
}
// Remove the Reviews and Additional information tab 
function woo_remove_product_tab($tabs) {
//	unset( $tabs['reviews'] );
	unset( $tabs['description'] ); 
	unset( $tabs['additional_information'] );  	
 	return $tabs;
}
add_filter( 'woocommerce_product_tabs', 'woo_remove_product_tab', 98);

// thay đổi form trang checkout
add_filter( 'woocommerce_checkout_fields' , 'custom_checkout_form' );
function custom_checkout_form( $fields ) {
    unset($fields['billing']['billing_postcode']); //Ẩn postCode
    unset($fields['billing']['billing_state']); //Ẩn bang hạt
    unset($fields['billing']['billing_country']);// Ẩn quốc gia
    unset($fields['billing']['billing_address_2']); //billing_company
    unset($fields['billing']['billing_company']);
    unset($fields['billing']['billing_last_name']);
    unset($fields['billing']['order_comments']);// Ẩn quốc gia
    unset($fields['billing']['billing_city']); //Ẩn select box chọn thành phố
    //unset($fields['billing']['billing_email']); 
     $fields['billing']['billing_first_name']['placeholder'] = "VD: Nguyễn Văn A";
     $fields['billing']['billing_phone']['placeholder'] = "0988xxxxxx";
     $fields['billing']['billing_email']['placeholder'] = "your_email@gmail.com"; 
    return $fields;
}
function custom_checkout_field_label( $fields ) {
    $fields['address_1']['label'] = 'Địa chỉ nhận hàng';
    $fields['first_name']['label'] = 'Họ và tên';
    return $fields;
}
add_filter( 'woocommerce_default_address_fields', 'custom_checkout_field_label' );

// To change add to cart text on single product page
add_filter( 'woocommerce_product_single_add_to_cart_text', 'woocommerce_custom_single_add_to_cart_text' ); 
function woocommerce_custom_single_add_to_cart_text() {
    echo '<i class="fas fa-cart-plus"></i> Thêm Vào Giỏ Hàng'  ; 
}
// Thay doi nut Order trang Thanh toan
function woocommerce_button_proceed_to_checkout() {
       $new_checkout_url = WC()->cart->get_checkout_url();
       ?>
       <a href="<?php echo $new_checkout_url; ?>" class="checkout-button button alt wc-forward">
	   <?php _e( 'Đặt mua ngay', 'woocommerce' ); ?></a>
<?php
}

/* Remove Image Sizes */
add_filter('intermediate_image_sizes_advanced','__return_false');

add_filter( 'woocommerce_variable_sale_price_html', 'lw_variable_product_price', 10, 2 );
add_filter( 'woocommerce_variable_price_html', 'lw_variable_product_price', 10, 2 );
function lw_variable_product_price( $v_price, $v_product ) {
// Sale Price
$v_prices = array( $v_product->get_variation_regular_price( 'min', true ), $v_product->get_variation_regular_price( 'max', true ) );
sort( $v_prices );
$v_saleprice = $v_prices[0]!==$v_prices[1] ? sprintf(__('%1$s','woocommerce'), wc_price( $v_prices[0] ) ) : wc_price( $v_prices[0] );
// Regular Price
$v_prices = array( $v_product->get_variation_price( 'min', true ), $v_product->get_variation_price( 'max', true ) );
$v_price = $v_prices[0]!==$v_prices[1] ? sprintf(__('%1$s', 'woocommerce'), wc_price( $v_prices[0] ) ) : wc_price( $v_prices[0] );
if ( $v_price !== $v_saleprice ) { 
	$v_price = '<ins>' . $v_price . $v_product->get_price_suffix() . '</ins><del><span>Giá niêm yết: </span>' . $v_saleprice.$v_product->get_price_suffix() . '</del>';
}
return $v_price;
}

add_filter( 'woocommerce_format_sale_price', 'invert_formatted_sale_price', 10, 3 );
function invert_formatted_sale_price( $price, $regular_price, $sale_price ) {
    return '<ins>' . ( is_numeric( $sale_price ) ? wc_price( $sale_price ) : $sale_price ) . '</ins><del><span>Giá niêm yết: </span>' . ( is_numeric( $regular_price ) ? wc_price( $regular_price ) : $regular_price ) . '</del>';
}
add_filter( 'woocommerce_variation_option_name', 'display_price_in_variation_option_name' );
function display_price_in_variation_option_name( $term ) {
    global $wpdb, $product;
    $result = $wpdb->get_col( "SELECT slug FROM {$wpdb->prefix}terms WHERE name = '$term'" );
    $term_slug = ( !empty( $result ) ) ? $result[0] : $term;
    $query = "SELECT postmeta.post_id AS product_id
                FROM {$wpdb->prefix}postmeta AS postmeta
                    LEFT JOIN {$wpdb->prefix}posts AS products ON ( products.ID = postmeta.post_id )
                WHERE postmeta.meta_key LIKE 'attribute_%'
                    AND postmeta.meta_value = '$term_slug'
                    AND products.post_parent = $product->id";
    $variation_id = $wpdb->get_col( $query );
    $parent = wp_get_post_parent_id( $variation_id[0] );
    if ( $parent > 0 ) {
        $_product = new WC_Product_Variation( $variation_id[0] );
        return $_product->get_price();
    }
    return $term;
}
// Add text before add to cart button
add_action( 'woocommerce_before_single_variation', 'xt_before_single_variation' );
function xt_before_single_variation(){
	global $post;
	$promotion_product = get_field( 'promotion_product' );
	$hotsale_product = get_field( 'hotsale_product' );
	$shipping = get_post_meta( $post->ID, 'shipping', true );
 	$select_shop_selected_option = get_field( 'select_shop' );
	$rows = get_field('product_linked');
	if ( get_field( 'installment' ) == 1 ) {
	echo '<span class="installment">Trả góp 0%</span>';
	}
	if( $rows ) {
		echo '<div class="linked-product">';
		foreach( $rows as $row ) {
			$link_linked_product = $row['link_linked_product'];
			$name_linked_product = $row['name_linked_product'];
			$price_linked_product = number_format( $row['price_linked_product'], 0, ',', '.' );
			echo '<a class="item-linked-product" href="' . $link_linked_product . '">';
			echo '<span>' . $name_linked_product . '</span>';
			echo '<strong>' . $price_linked_product . ' ₫</strong>' ;
			echo '</a>';
		}
		echo '</div>'; // linked-product
	}
	
	echo '<div class="promotion-info">';
	if( $hotsale_product ) { 
		echo '<div class="hotsale-product">' . $hotsale_product . '</div>';	
	}
	if( $promotion_product ) { 
		echo '<div class="promotion-product"><div class="promotion-icon"><i class="icon-gift"></i> Lưu ý</div><div>' . $promotion_product . '</div></div>';
	}
	echo '</div>'; // End promotion-info
}

// Add text before add to cart form
add_action( 'woocommerce_before_add_to_cart_form', 'xt_before_add_to_cart_form' );
function xt_before_add_to_cart_form(){
	global $post;
	$promotion_product = get_field( 'promotion_product' );
	$hotsale_product = get_field( 'hotsale_product' );
	$shipping = get_post_meta( $post->ID, 'shipping', true );
 	$select_shop_selected_option = get_field( 'select_shop' );
	$rows = get_field('product_linked');
	if ( get_field( 'installment' ) == 1 ) {
	echo '<span class="installment">Trả góp 0%</span>';
	}
}


/* Add quick buy button go to checkout after click */
add_action('woocommerce_after_add_to_cart_button','quickbuy_after_addtocart_button');
function quickbuy_after_addtocart_button(){
    global $product;
    ?>
    <button type="button" class="button buy_now_button"><?php _e('Mua ngay', 'ntx'); ?></button>
    <input type="hidden" name="is_buy_now" class="is_buy_now" value="0" autocomplete="off"/>
    <?php
}
add_filter('woocommerce_add_to_cart_redirect', 'redirect_to_checkout');
function redirect_to_checkout($redirect_url) {
    if (isset($_REQUEST['is_buy_now']) && $_REQUEST['is_buy_now']) {
        $redirect_url = wc_get_cart_url();
    }
    return $redirect_url;
}

function change_translate_text_multiple( $translated ) {
	$text = array(
		'Reply' => 'Bình luận',
		'Was this review helpful to you?' => 'Nhận xét này có hữu ích cho bạn?',
	);
	$translated = str_ireplace(  array_keys($text),  $text,  $translated );
	return $translated;
}
add_filter( 'gettext', 'change_translate_text_multiple', 20 );

function js_custom(){;?>
<script type="text/javascript">
    jQuery(document).ready(function ($) {
		jQuery('body').on('click', '.buy_now_button', function(e){
			e.preventDefault();
			var thisParent = jQuery(this).parents('form.cart');
			if(jQuery('.single_add_to_cart_button', thisParent).hasClass('disabled')) {
				jQuery('.single_add_to_cart_button', thisParent).trigger('click');
				return false;
			}
			thisParent.addClass('ntx-quickbuy');
			jQuery('.is_buy_now', thisParent).val('1');
			jQuery('.single_add_to_cart_button', thisParent).trigger('click');
		});
		
		jQuery(".menu .icon-angle-down, .product-footer-right .product.product-small .promotion, .product-footer-right .product.product-small .item-hotsale").remove();
		jQuery(".product-info h1.product-title").remove();
		jQuery(".product-type-variable .product-info>:is(.promotion-info, .linked-product)").remove();
		jQuery(".menu .sub-menu").removeClass("nav-dropdown nav-dropdown-default");
		jQuery("body").removeClass("nav-dropdown-has-arrow nav-dropdown-has-shadow");
				
		jQuery(function(){
			var current = location.pathname;
			jQuery('.item-linked-product').each(function(){
				var $this = $(this);
				if($this.attr('href').indexOf(current) !== -1){
					$this.addClass('active');
				}
			})
		});
    });
</script>
<?php }
add_action('wp_footer','js_custom');
add_filter('use_block_editor_for_post', '__return_false', 10);
add_filter( 'gutenberg_use_widgets_block_editor', '__return_false' );
add_filter( 'use_widgets_block_editor', '__return_false' );
// Hiển thị trường "Email" và "Mật khẩu" trên trang sản phẩm WooCommerce nếu chúng đã được bật trong ACF
function display_email_password_fields()
{
    global $product;

    // Lấy giá trị trường tùy chọn Email và Mật khẩu từ ACF cho sản phẩm hiện tại
    $email_option = get_field('hb-email', $product->get_id());
    $password_option = get_field('hb-mat-khau', $product->get_id());

    // Kiểm tra giá trị của các trường tùy chọn và hiển thị trường tùy chọn nếu có
    if ($email_option) {
        echo '<div class="email-option">';
        echo '<input type="text" name="hb-email" id="hb-email" placeholder="Email">';
        echo '</div>';
    }

    if ($password_option) {
        echo '<div class="password-option">';
        echo '<input type="text" name="hb-mat-khau" id="hb-mat-khau" placeholder="Mật khẩu">';
        echo '</div>';
    }
}

//add_action('woocommerce_before_add_to_cart_button', 'display_email_password_fields');

// Hiển thị thông tin từ trường tùy chọn ACF trong phần "Customer provided note" của đơn hàng WooCommerce
function display_acf_fields_in_order_notes($order_id)
{
    $order = wc_get_order($order_id);

    // Lấy giá trị từ trường tùy chọn ACF cho sản phẩm trong đơn hàng
    $email = '';
    $password = '';

    foreach ($order->get_items() as $item) {
        $product_id = $item->get_product_id();
        $email = get_field('hb-email', $product_id);
        $password = get_field('hb-mat-khau', $product_id);

        // Lưu thông tin ACF cho từng sản phẩm vào đơn hàng
        update_post_meta($order->get_id(), 'hb-email', $email);
        update_post_meta($order->get_id(), 'hb-mat-khau', $password);
    }

    // Tạo chuỗi ghi chú đơn hàng
    $order_notes = '';

    if (!empty($email)) {
        $order_notes .= 'Email: ' . $email . "\n";
    }

    if (!empty($password)) {
        $order_notes .= 'Mật khẩu: ' . $password . "\n";
    }

    // Thêm thông tin vào phần "Customer provided note" của đơn hàng
    if (!empty($order_notes)) {
        $current_note = $order->get_customer_note();
        if (!empty($current_note)) {
            $order_notes = $current_note . "\n" . $order_notes;
        }
        $order->set_customer_note($order_notes);
        $order->save();
    }
}

//add_action('woocommerce_new_order', 'display_acf_fields_in_order_notes');

// Xóa giá trị của trường tùy chọn ACF sau khi đơn hàng hoàn thành
function remove_acf_fields_after_order_complete($order_id)
{
    $order = wc_get_order($order_id);

    // Xóa giá trị của trường tùy chọn ACF
    delete_post_meta($order->get_id(), 'hb-email');
    delete_post_meta($order->get_id(), 'hb-mat-khau');
}

//add_action('woocommerce_order_status_completed', 'remove_acf_fields_after_order_complete');


add_action('woocommerce_before_add_to_cart_button', 'shw_show_email_password_fields');
function shw_show_email_password_fields()
{
    global $product;

    // Lấy giá trị trường tùy chọn Email và Mật khẩu từ ACF cho sản phẩm hiện tại
    $email_option = get_field('hb-email', $product->get_id());
    $password_option = get_field('hb-mat-khau', $product->get_id());

    // Kiểm tra giá trị của các trường tùy chọn và hiển thị trường tùy chọn nếu có
    if ($email_option) {
        echo '<div class="email-option">';
        echo '<input type="text" name="hb-email" id="hb-email" placeholder="Email/Tài khoản">';
        echo '</div>';
    }

    if ($password_option) {
        echo '<div class="password-option">';
        echo '<input type="text" name="hb-mat-khau" id="hb-mat-khau" placeholder="Mật khẩu">';
        echo '</div>';
    }
}
function shw_add_email_password_fields($cart_item_data, $product_id, $variation_id)
{
    $email = filter_input(INPUT_POST, 'hb-email');
    if (isset($email))
        $cart_item_data['hb-email'] = $email;
    $password = filter_input(INPUT_POST, 'hb-password');
    if (isset($password))
        $cart_item_data['hb-password'] = $password;
    return $cart_item_data;
}
add_filter('woocommerce_add_cart_item_data', 'shw_add_email_password_fields',  10, 3);

function shw_show_email_password_fields_into_cart($item_data, $cart_item)
{
    if (!empty($cart_item['hb-email']))
        $item_data[] = array(

            'key' => 'Email',
            'value' => $cart_item['hb-email'],
            'display' => wc_clean($cart_item['hb-email']),
        );
    if (!empty($cart_item['hb-mat-khau']))
        $item_data[] = array(

            'key' => 'Mật khẩu',
            'value' => $cart_item['hb-mat-khau'],
            'display' => wc_clean($cart_item['hb-mat-khau']),
        );
    return $item_data;
}
add_filter('woocommerce_get_item_data', 'shw_show_email_password_fields_into_cart', 10, 2);

function shw_show_email_password_fields_into_cart_to_order_items($item, $cart_item_key, $values, $order)
{
    if (!empty($values['hb-email']))
        $item->add_meta_data('Email', $values['hb-email']);
    if (!empty($values['hb-mat-khau']))
        $item->add_meta_data('Mật khẩu', $values['hb-mat-khau']);
}
add_action('woocommerce_checkout_create_order_line_item', 'shw_show_email_password_fields_into_cart_to_order_items', 10,43);
